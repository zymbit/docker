# This file describes the standard way to cross building Docker, using docker
#
# Usage:
#
# # Assemble the full dev environment. This is slow the first time.
# head -n -2 Dockerfile > .DockerfileCross.swp
# cat Dockerfile.cross >> .DockerfileCross.swp
# tail -n 2 Dockerfile >> .DockerfileCross.swp
# docker build -t dockercross -f DockerfileCross.swp
#
# # Mount your source in an interactive container for quick testing:
# docker run -v `pwd`:/go/src/github.com/docker/docker --privileged -i -t dockercross bash
#

MAINTAINER Praneeth Bodduluri <lifeeth@resin.io>

# Packaged dependencies
RUN apt-get install -y \
	bison \
	flex \
	libc6-dev-armel-armhf-cross \
	gcc-arm-linux-gnueabi \
	gcc-multilib \
	--no-install-recommends

# Compile and install lvm for linux/arm and linux/i386
RUN cd /usr/local/lvm2 \
	&& make clean && export ac_cv_func_malloc_0_nonnull=yes \
	&& ./configure --enable-static_link --host=arm-linux-gnueabi --prefix=/usr/arm-linux-gnueabi/ \
	&& make device-mapper \
	&& make install_device-mapper
RUN cd /usr/local/lvm2 \
	&& make clean && export ac_cv_func_malloc_0_nonnull=yes \
	&& ./configure --build=i686-pc-linux-gnu "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32" --prefix=/usr/lib32/ --enable-static_link \
	&& make device-mapper \
	&& make install_device-mapper

# Compile and install sqlite3 for linux/arm and linux/i386
ENV SQLITE3_VERSION 3080803
RUN mkdir -p /usr/src/sqlite3 \
	&& curl -sSL http://www.sqlite.org/2015/sqlite-autoconf-${SQLITE3_VERSION}.tar.gz | tar -v -C /usr/src/sqlite3 -xz --strip-components=1
RUN cd /usr/src/sqlite3 \
	&& ./configure --host=arm-linux-gnueabi --prefix=/usr/arm-linux-gnueabi/ \
	&& make \
	&& make install
RUN cd /usr/src/sqlite3 \
	&& make clean && ./configure --build=i686-pc-linux-gnu "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32" --prefix=/usr/lib32/ \
	&& make \
	&& make install

# Compile and install libapparmor for linux/arm and linux/i386
ENV LIBAPPARMOR_VERSION 2.9
ENV LIBAPPARMOR_PATCH 1
RUN mkdir -p /usr/src/apparmor \
	&& curl -sSL https://launchpad.net/apparmor/${LIBAPPARMOR_VERSION}/${LIBAPPARMOR_VERSION}.${LIBAPPARMOR_PATCH}/+download/apparmor-${LIBAPPARMOR_VERSION}.${LIBAPPARMOR_PATCH}.tar.gz | tar -v -C /usr/src/apparmor -xz --strip-components=1
RUN cd /usr/src/apparmor/libraries/libapparmor \
	&& ./configure --host=arm-linux-gnueabi --prefix=/usr/arm-linux-gnueabi/ \
	&& make \
	&& make install
RUN cd /usr/src/apparmor/libraries/libapparmor \
	&& make clean && ./configure --build=i686-pc-linux-gnu "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32" --prefix=/usr/lib32/ \
	&& make \
	&& make install

# Compile Go for cross compilation
ENV DOCKER_CROSSPLATFORMS \
	linux/386 linux/arm \
	darwin/amd64 darwin/386 \
	freebsd/amd64 freebsd/386 freebsd/arm \
	windows/amd64 windows/386

# (set an explicit GOARM of 5 for maximum compatibility)
ENV GOARM 5
RUN cd /usr/local/go/src \
	&& set -x \
	&& for platform in $DOCKER_CROSSPLATFORMS; do \
		GOOS=${platform%/*} \
		GOARCH=${platform##*/} \
			./make.bash --no-clean 2>&1; \
	done

# Set an explicit BUILD_CROSS variable so that the hack/make.sh cross uses this specific paths set in this Dockerfile for C libraries
ENV BUILD_CROSS 1
